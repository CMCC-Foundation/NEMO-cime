#!/usr/bin/env python
"""
CIME interface to build the nemo component library
"""
import os, shutil, sys, glob, imp

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.utils import expect, run_cmd
from CIME.buildlib import parse_input
#from CIME.BuildTools import configure
from CIME.build import get_standard_makefile_args

logger = logging.getLogger(__name__)

###############################################################################
def _build_nemo():
###############################################################################

    caseroot, libroot, _ = parse_input(sys.argv)

    with Case(caseroot) as case:
        casetools = case.get_value("CASETOOLS")
        objroot = case.get_value("OBJROOT")
        srcroot = case.get_value("SRCROOT")
        gmake_j = case.get_value("GMAKE_J")
        gmake = case.get_value("GMAKE")
        driver = case.get_value("COMP_INTERFACE")

        # create the required $OBJROOT/ocn/obj directory
        blddir_obj = os.path.join(objroot, "ocn", "obj")
        if not os.path.exists(blddir_obj):
            os.makedirs(blddir_obj)
        os.chdir(blddir_obj)

        # set cpp option for nemo depending on ocean grid and passive tracer
#        base_cpp = " -Dkey_diahth -Dkey_mpp_mpi -Dkey_iomput -Dkey_coupled -DCCSMCOUPLED "
        base_cpp = " -DCCSMCOUPLED -Dkey_diahth "

        res_cpp = " "
        drv_cpp = " "
        ver_cpp = " -Dkey_xios -Dkey_qco "
        if driver == 'nuopc':
            drv_cpp = " -DNUOPC_IN_NEMO "


        top_cpp = " "
        ocn_pstr_modules = " ".join(case.get_value("NEMO_TOP_MODULES").split())
        if ocn_pstr_modules:
            top_cpp = " -Dkey_top "
            for module in ocn_pstr_modules.split(" "):
                if module == "age":
                    top_cpp = top_cpp + " -Dkey_age "
                elif module == "cfc":
                    top_cpp = top_cpp + " -Dkey_cfc "
                else:
                    expect(False, "module %s is not a valid value in NEMO_TOP_MODULES!" %module)
    
        bfb_cpp = " "
        bfbflag = case.get_value("BFBFLAG")
        if bfbflag:
            bfb_cpp = bfb_cpp + " -Dkey_nosignedzero "
    
        dbg_cpp = " "
        dbgflag = case.get_value("DEBUG")
        if dbgflag:
            dbg_cpp = dbg_cpp + " -Dkey_nosignedzero "

        nemodefs = base_cpp + ver_cpp + res_cpp + drv_cpp + top_cpp + bfb_cpp + dbg_cpp

        # create Filepath file
        objroot = case.get_value("OBJROOT")
        fld_nmv = "source"
        filepath_file = os.path.join(objroot, "ocn", "obj", "Filepath")
        if not os.path.isfile(filepath_file):
            paths_nemo = [os.path.join(caseroot, "SourceMods", "src.nemo"), 
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "interface"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "ASM"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "BDY"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "C1D"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "CRS"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "DIA"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "DIU"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "DOM"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "DYN"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "FLO"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "ICB"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "IOM"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "ISF"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "LBC"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "LDF"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "OBS"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "SBC"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "STO"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "TDE"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "TRA"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "TRD"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "USR"),
                          os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "src", "OCE", "ZDF")]

# TO BE UPDATED AND TESTED
            ocn_pstr_modules = " ".join(case.get_value("NEMO_TOP_MODULES").split())
            if ocn_pstr_modules:
                paths_top = [os.path.join(srcroot, "components", "nemo", fld_nmv, "src", "nemocore", "TOP"),
                             os.path.join(srcroot, "components", "nemo", fld_nmv, "src", "nemocore", "TOP", "AGE"),
                             os.path.join(srcroot, "components", "nemo", fld_nmv, "src", "nemocore", "TOP", "C14b"),
                             os.path.join(srcroot, "components", "nemo", fld_nmv, "src", "nemocore", "TOP", "CFC"),
                             os.path.join(srcroot, "components", "nemo", fld_nmv, "src", "nemocore", "TOP", "MY_TRC"),
                             os.path.join(srcroot, "components", "nemo", fld_nmv, "src", "nemocore", "TOP", "PISCES"),
                             os.path.join(srcroot, "components", "nemo", fld_nmv, "src", "nemocore", "TOP", "TRP")]


            if driver == 'nuopc':
                paths_nemo.append(os.path.join(srcroot, "components", "nemo", fld_nmv, "drivers", "cpl_nuopc"))
            if driver == 'mct':
                paths_nemo.append(os.path.join(srcroot, "components", "nemo", fld_nmv, "drivers", "cpl_share"))
                paths_nemo.append(os.path.join(srcroot, "components", "nemo", fld_nmv, "drivers", "cpl_mct"))
#            paths_nemo.append(os.path.join(caseroot, "SourceMods", "src.nemo"))
            paths_nemo.append(os.path.join(srcroot, "components", "nemo", fld_nmv, "nemocore", "ext", "IOIPSL", "src"))

            with open(filepath_file, "w") as filepath:
                filepath.write("\n".join(paths_nemo))
                if ocn_pstr_modules:
                    filepath.write("\n".join(paths_top))
                filepath.write("\n")

        # build the library
        #mkdep_opts = "-p"
        makefile = os.path.join(casetools, "Makefile")
        complib = os.path.join(libroot, "libocn.a")
        #inc_xios = case.get_value("XIOS_PATH")
        inc_xios = os.environ["XIOS_PATH"]+"/inc"
        #cmd = "%s complib -j %d MODEL=nemo COMPLIB=%s -f %s %s USER_MKDEPENDS_OPTS=\"%s\" USER_CPPDEFS=\"%s\" USER_INCLDIR=\"-I%s\"" \
        #    % (gmake, gmake_j, complib, makefile, get_standard_makefile_args(case), mkdep_opts, nemodefs, inc_xios)
        cmd = "%s complib -j %d MODEL=nemo COMPLIB=%s -f %s %s USER_CPPDEFS=\"%s\" USER_INCLDIR=\"-I%s\"" \
            % (gmake, gmake_j, complib, makefile, get_standard_makefile_args(case), nemodefs, inc_xios)

        rc, out, err = run_cmd(cmd, from_dir=os.path.join(objroot, "ocn", "obj"))
        expect(rc == 0, "Command %s failed rc=%d\nout=%s\nerr=%s" % (cmd, rc, out, err))

        logger.info("Command %s completed with output %s\nerr %s", cmd, out, err)

        # build the REBUILD_NEMO tool, but it can be compiled only once, so I copy the compiled version
        OrigRNd = os.path.join(srcroot, "components", "nemo", fld_nmv, "utils", "REBUILD_NEMO")
        RNdir = os.path.join(objroot,"ocn", "REBUILD_NEMO")
        if not os.path.exists(RNdir):
        #    os.makedirs(RNdir)
            shutil.copytree(OrigRNd,RNdir)

#        RNdir2 = os.path.join(objroot,"ocn", "REBUILD_NEMO", "src")
#        os.chdir(RNdir2)
#
#        tooldir = os.path.join(CIMEROOT, "tools")
#        mach_name = 
#
#        
#
#        if not os.path.exists("env_mach_specific.xml"):
#            cmd = "%s/configure --mpilib mpi-serial --machine %s" % (tooldir, mach_name)
#            rc, out, err = run_cmd(cmd, from_dir=RNdir2)
#            expect(rc == 0, "Command %s failed rc=%d\nout=%s\nerr=%s" % (cmd, rc, out, err))
#        
#        source .env_mach_specific.csh
#        cmd = "%s -f %s" % (gmake, makefile)
#
#        rc, out, err = run_cmd(cmd, from_dir=RNdir2)
#        expect(rc == 0, "Command %s failed rc=%d\nout=%s\nerr=%s" % (cmd, rc, out, err))
#
## possible option
## /users/home/dp16116/CESM2/cesm2.1.0/cime/tools/configure --macros-format Makefile --mpilib mpi-serial --machine athena 

###############################################################################

if __name__ == "__main__":
    _build_nemo()
